G = {N, 𝚺, P, S}

N = {"program", "stmt_list", "stmt", "stmt_simple", "stmt_assign", "stmt_io", "stmt_struct", "stmt_cmpd", "stmt_if", "else_part", 
    "stmt_while", "struct_decl", "member_list", "member_decl", "DataType", "condition", "rel_op", "expression", "expression_tail", 
    "term", "term_tail", "factor"}

Σ = {'+', '-', '*', '/', '%', '(', ')', '=', 'cin', 'cout', 'if', 'else', 'while', 'struct', '{', '}', '>>', '<<', 'int', 'main', 
    'return', ';', 'IDENTIFIER', 'INT_CONST', '<', '<=', '>', '>=', '==', '!=', 
    'bool', 'char', 'string', 'double', 'epsilon'}

S = program

P = {

program -> 'int' 'main' '(' ')' '{' stmt_list 'return' INT_CONST ';' '}'

stmt_list -> stmt stmt_list | epsilon

stmt -> stmt_simple ';' | stmt_struct

stmt_simple -> stmt_assign | stmt_io

stmt_assign -> IDENTIFIER '=' expression

stmt_io -> 'cin' '>>' IDENTIFIER | 'cout' '<<' IDENTIFIER

stmt_struct -> stmt_cmpd | stmt_if | stmt_while | struct_decl

stmt_cmpd -> '{' stmt_list '}'

stmt_if -> 'if' '(' condition ')' stmt else_part

else_part -> 'else' stmt | epsilon

stmt_while -> 'while' '(' condition ')' stmt

struct_decl -> 'struct' IDENTIFIER '{' member_list '}'

member_list -> member_decl ';' member_list | epsilon

member_decl -> DataType IDENTIFIER

DataType -> 'int' | 'bool' | 'char' | 'string' | 'double' | 'struct' IDENTIFIER

condition -> expression rel_op expression

rel_op -> '<' | '<=' | '>' | '>=' | '==' | '!='

expression -> term expression_tail

expression_tail -> ('+' | '-') term expression_tail | epsilon

term -> factor term_tail

term_tail -> ('*' | '/' | '%') factor term_tail | epsilon

factor -> '(' expression ')' | IDENTIFIER | INT_CONST

}